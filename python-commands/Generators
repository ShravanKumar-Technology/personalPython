
# def square_numbers(nums):
#     for i in nums:
#         yield (i*i)                                                                        # yield() is here generator

# my_nums = square_numbers([1,2,3,4,5])

my_nums = (x*x for x in [1,2,3,4,5])
 # here if we use square brackets we get list, for using () we are getting generators

print list(my_nums) # [1, 4, 9, 16, 25]
# here generators are converted to list, due to which it loses some of its advantages

# for num in my_nums:
#     print num

--------------------------------------------------------------------------------------------------------------------------------------------

import mem_profile
import random
import time

names = ['John', 'Corey', 'Adam', 'Steve', 'Rick', 'Thomas']
majors = ['Math', 'Engineering', 'CompSci', 'Arts', 'Business']

print 'Memory (Before): {}Mb'.format(mem_profile.memory_usage_psutil())

def people_list(num_people):
    result = []
    for i in xrange(num_people):
        person = {
                    'id': i,
                    'name': random.choice(names),
                    'major': random.choice(majors)
                }
        result.append(person)
    return result

def people_generator(num_people):
    for i in xrange(num_people):
        person = {
                    'id': i,
                    'name': random.choice(names),
                    'major': random.choice(majors)
                }
        yield person

# t1 = time.clock()                                                                #here list is used instead of generators.
# people = people_list(1000000)
# t2 = time.clock()

t1 = time.clock()
people = people_generator(1000000)                                  #here generators are used.
t2 = time.clock()

print 'Memory (After) : {}Mb'.format(mem_profile.memory_usage_psutil())
print 'Took {} Seconds'.format(t2-t1)

-----------------------------------------------------------------------------------------------------------------------------------------------------
above program shows how generators do not use much memory as do not load data into memory. you can just iterate through the memory with out loading the data into memory.
-----------------------------------------------------------------------------------------------------------------------------------------------------


from pympler import summary, muppy
import psutil
import resource
import os
import sys

def memory_usage_psutil():
    # return the memory usage in MB
    process = psutil.Process(os.getpid())
    mem = process.get_memory_info()[0] / float(2 ** 20)
    return mem

def memory_usage_resource():
    rusage_denom = 1024.
    if sys.platform == 'darwin':
        # ... it seems that in OSX the output is different units ...
        rusage_denom = rusage_denom * rusage_denom
    mem = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / rusage_denom
    return mem

-----------------------------------------------------------------------------------------------------------------------------------------------

run above file as mem_profile before runing people.py program.

-------------------------------------------------------------------------------------------------------------------------------------------------
